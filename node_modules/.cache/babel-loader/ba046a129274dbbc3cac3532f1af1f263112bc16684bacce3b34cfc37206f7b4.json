{"ast":null,"code":"var _jsxFileName = \"C:\\\\uplo\\\\src\\\\components\\\\PythonCompilerSlide.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport Slide from './Slide';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst runPython = (code, outputRef) => {\n  // Brython requires the script to be run in a specific way\n  window.__BRYTHON__.run_script(code);\n\n  // After running the script, you can extract the output from Brython\n  // if you are using Brython's default print to the console.\n  // Note: Brython might not directly provide a method to capture print outputs,\n  // so you may need to adjust the implementation based on your needs.\n};\nconst PythonCompilerSlide = () => {\n  _s();\n  const outputRef = useRef();\n  const [brythonLoaded, setBrythonLoaded] = useState(false);\n  useEffect(() => {\n    // Initialize Brython\n    if (window.__BRYTHON__) {\n      setBrythonLoaded(true);\n    } else {\n      // Load Brython and check if it is loaded\n      const script = document.createElement('script');\n      script.src = 'https://cdn.jsdelivr.net/npm/brython@3.11.0/brython.min.js';\n      script.onload = () => {\n        window.__BRYTHON__ = window.brython;\n        setBrythonLoaded(true);\n      };\n      document.body.appendChild(script);\n    }\n  }, []);\n  const handleRunClick = () => {\n    if (!brythonLoaded) {\n      console.error('Brython is not loaded yet.');\n      return;\n    }\n    const code = document.getElementById(\"python-code\").value;\n    console.log(code, 'code');\n    outputRef.current.innerText = ''; // Clear previous output\n    runPython(code, outputRef);\n  };\n  return /*#__PURE__*/_jsxDEV(Slide, {\n    className: \"python-compiler-slide\",\n    children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n      id: \"python-code\",\n      defaultValue: \"print('Hello, World!')\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleRunClick,\n      children: \"Run Python Code\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      ref: outputRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"mycanvas\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(PythonCompilerSlide, \"h7aUlluMz6dHviQQeJSAAqNTtIw=\");\n_c = PythonCompilerSlide;\nexport default PythonCompilerSlide;\nvar _c;\n$RefreshReg$(_c, \"PythonCompilerSlide\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Slide","jsxDEV","_jsxDEV","runPython","code","outputRef","window","__BRYTHON__","run_script","PythonCompilerSlide","_s","brythonLoaded","setBrythonLoaded","script","document","createElement","src","onload","brython","body","appendChild","handleRunClick","console","error","getElementById","value","log","current","innerText","className","children","id","defaultValue","fileName","_jsxFileName","lineNumber","columnNumber","onClick","ref","_c","$RefreshReg$"],"sources":["C:/uplo/src/components/PythonCompilerSlide.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport Slide from './Slide';\r\n\r\nconst runPython = (code, outputRef) => {\r\n  // Brython requires the script to be run in a specific way\r\n  window.__BRYTHON__.run_script(code);\r\n  \r\n  // After running the script, you can extract the output from Brython\r\n  // if you are using Brython's default print to the console.\r\n  // Note: Brython might not directly provide a method to capture print outputs,\r\n  // so you may need to adjust the implementation based on your needs.\r\n};\r\n\r\nconst PythonCompilerSlide = () => {\r\n  const outputRef = useRef();\r\n  const [brythonLoaded, setBrythonLoaded] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Initialize Brython\r\n    if (window.__BRYTHON__) {\r\n      setBrythonLoaded(true);\r\n    } else {\r\n      // Load Brython and check if it is loaded\r\n      const script = document.createElement('script');\r\n      script.src = 'https://cdn.jsdelivr.net/npm/brython@3.11.0/brython.min.js';\r\n      script.onload = () => {\r\n        window.__BRYTHON__ = window.brython;\r\n        setBrythonLoaded(true);\r\n      };\r\n      document.body.appendChild(script);\r\n    }\r\n  }, []);\r\n\r\n  const handleRunClick = () => {\r\n    if (!brythonLoaded) {\r\n      console.error('Brython is not loaded yet.');\r\n      return;\r\n    }\r\n\r\n    const code = document.getElementById(\"python-code\").value;\r\n    console.log(code, 'code');\r\n\r\n    outputRef.current.innerText = ''; // Clear previous output\r\n    runPython(code, outputRef);\r\n  };\r\n\r\n  return (\r\n    <Slide className=\"python-compiler-slide\">\r\n      <textarea id=\"python-code\" defaultValue=\"print('Hello, World!')\" />\r\n      <button onClick={handleRunClick} >Run Python Code</button>\r\n      <pre ref={outputRef}></pre>\r\n      <canvas id=\"mycanvas\"></canvas>\r\n    </Slide>\r\n  );\r\n};\r\n\r\nexport default PythonCompilerSlide;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAOC,KAAK,MAAM,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5B,MAAMC,SAAS,GAAGA,CAACC,IAAI,EAAEC,SAAS,KAAK;EACrC;EACAC,MAAM,CAACC,WAAW,CAACC,UAAU,CAACJ,IAAI,CAAC;;EAEnC;EACA;EACA;EACA;AACF,CAAC;AAED,MAAMK,mBAAmB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChC,MAAML,SAAS,GAAGP,MAAM,CAAC,CAAC;EAC1B,MAAM,CAACa,aAAa,EAAEC,gBAAgB,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EAEzDF,SAAS,CAAC,MAAM;IACd;IACA,IAAIS,MAAM,CAACC,WAAW,EAAE;MACtBK,gBAAgB,CAAC,IAAI,CAAC;IACxB,CAAC,MAAM;MACL;MACA,MAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;MAC/CF,MAAM,CAACG,GAAG,GAAG,4DAA4D;MACzEH,MAAM,CAACI,MAAM,GAAG,MAAM;QACpBX,MAAM,CAACC,WAAW,GAAGD,MAAM,CAACY,OAAO;QACnCN,gBAAgB,CAAC,IAAI,CAAC;MACxB,CAAC;MACDE,QAAQ,CAACK,IAAI,CAACC,WAAW,CAACP,MAAM,CAAC;IACnC;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMQ,cAAc,GAAGA,CAAA,KAAM;IAC3B,IAAI,CAACV,aAAa,EAAE;MAClBW,OAAO,CAACC,KAAK,CAAC,4BAA4B,CAAC;MAC3C;IACF;IAEA,MAAMnB,IAAI,GAAGU,QAAQ,CAACU,cAAc,CAAC,aAAa,CAAC,CAACC,KAAK;IACzDH,OAAO,CAACI,GAAG,CAACtB,IAAI,EAAE,MAAM,CAAC;IAEzBC,SAAS,CAACsB,OAAO,CAACC,SAAS,GAAG,EAAE,CAAC,CAAC;IAClCzB,SAAS,CAACC,IAAI,EAAEC,SAAS,CAAC;EAC5B,CAAC;EAED,oBACEH,OAAA,CAACF,KAAK;IAAC6B,SAAS,EAAC,uBAAuB;IAAAC,QAAA,gBACtC5B,OAAA;MAAU6B,EAAE,EAAC,aAAa;MAACC,YAAY,EAAC;IAAwB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACnElC,OAAA;MAAQmC,OAAO,EAAEhB,cAAe;MAAAS,QAAA,EAAE;IAAe;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAC1DlC,OAAA;MAAKoC,GAAG,EAAEjC;IAAU;MAAA4B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAC3BlC,OAAA;MAAQ6B,EAAE,EAAC;IAAU;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1B,CAAC;AAEZ,CAAC;AAAC1B,EAAA,CAzCID,mBAAmB;AAAA8B,EAAA,GAAnB9B,mBAAmB;AA2CzB,eAAeA,mBAAmB;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}